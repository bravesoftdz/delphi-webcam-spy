[main]

# source for the images.  This can be either 'webcam', or an HTTP URL (see example below)
source=webcam
# source=http://localhost:8181/webcam.jpg

# the movement value that triggers image capture.  This is basically a percentage of the image that must have changed for
# movement detection to be triggered.  For example, setting this to 1 means that only 1% of pixels needs to change in order to 
# trigger movement detection (this will trigger constantly), whereas setting this to 100 means that every pixel needs to change
# and therefore movement detection is very unlikely.  Note that you can adjust this value while the program is running
# by adjusting the slider.
moveTrigger=10

# this value specifies how much the RGB values of each pixel need to change in order for a pixel to be considered "changed"
# it's unlikely that you'll ever need to change this, I only put it in as I don't like hard-coding stuff.
pixelTolerance=10

# this value defines how many frames must be different for the movement trigger
# setting to a value > 1 can stop the movement trigger from being fired when only a brief movement is detected
frameDiffsForTriggerCount=1

# grace period - after launching the program waits this number of seconds before starting the checking process
# (allows time to position webcam)
gracePeriod=5

# this is how often the program compares images (milliseconds)
normalFrameinterval=1000

# this is how often the program compares images (milliseconds) when movement is detected
fastFrameinterval=200

# this is how long the "fastFrameInterval" is used for after movement is detected (seconds)
fastFrameintervalPeriod=5

# whether to lock the system when movement detected
lockOnMovement=false

# if true, the lock countdown will be cancelled if movement is no longer detected during the countdown
# if false, the lock countdown can only be stopped by the user clicking the cancel button
cancelLockIfNoMovement=false

# if locking, give the user this number of seconds warning before locking system
cancelPeriod=10

# launch this program when movement detected
launchOnMovement=
workingDirectory=c:\

# play this sound (.wav file) when movement detected
playSoundOnMovement=

# whether to minimize to the system tray
# note there is a problem where the "cancel lock" button does not display when restoring from the tray
# although pressing ESC still works.  I have no idea why this is.
minimizeToTray=false

# whether to capture a JPG image when movement detected
saveJpegOnMovement=false

# directory to save JPG images to (optional)
saveDirectory=

# whether to shut down the PC when movement detected
shutdownOnMovement=false



# whether to mail the JPGs to an email address (set to true to enable this)
sendViaEmail=false

# how often the mailer thread should check for new images on the disk (milliseconds)
# (the mailing process runs in the background and checks the disk for new JPG files)
# you probably don't need to change this
email.checkfileinterval=500

# email message properties, i.e. who to send the message from/to.  Adjust this accordingly.
email.userid=
email.to=you@mycompany.com
email.from=me@mycompany.com
email.subject=Webcam image
email.body=Webcam image was detected!

# email server details, i.e. which SMTP server to send the message through.
# You will probably need to get this info from your ISP.
# the host may look something like smtp.yourisp.com
# it's unlikely that the port will ever be anything but 25 which is the standard smtp port
email.host=smtp.yourisp.com
email.port=25




# whether to upload the JPGs to an FTP server  (set to true to enable this)
sendViaFtp=false

# how often the ftp upload thread should check for new images on the disk (milliseconds)
# (the ftp upload process runs in the background and checks the disk for new JPG files)
# you probably don't need to change this
ftp.checkfileinterval=500

# ftp upload properties
ftp.host=localhost
ftp.port=21
ftp.user=user
# note - you can hard-code the password, but if anyone steals your PC they will be able to access your account.
# Set to *prompt* to have the program prompt you for this instead.
ftp.password=*prompt*
ftp.passive=false
ftp.remoteDirectory=/

# leave this blank to upload every JPG file with its sequence number intact
# if you want to upload the same filename every time, enter it here, e.g ftp.uploadFileName=myimage.jpg
# (this may be more useful if you are uploading to a web site that displays a single image file)
ftp.uploadFileName=



# whether move action should always stay on top of other windows
alwaysOnTop=false


# leave these properties alone, they are used to save the screen size & position
useZone=true
self.Top=129
self.Left=159
self.Height=448
self.Width=768
pnlDetectionZone.Top=2
pnlDetectionZone.Left=263
pnlDetectionZone.Height=109
pnlDetectionZone.Width=143

# whether to compare previous frame (0) or base image (1)
compareMode=0

# check for new version on startup
checkForNewVersion=true

# whether to use the standard Windows mechanism for locking the system,
# or to use the custom locking feature built into Move Action.
# if the custom locking feature is used, Move Action can automatically
# unlock the PC automatically if movement is no longer detected, whereas with
# the Windows lock you need to enter your Windows password.
# Note - if you want to use the custom locking feature under Windows Vista,
# Move Action must be run as administrator
# Also note that although I have tested the custom locking feature
# there may be a weakness allowing a user to circumvent it
useWindowsLock=true
